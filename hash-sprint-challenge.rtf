{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww16900\viewh10840\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Hashing function:\
A function you pass your values in to get back an index. This function is very important because it can help minimize collisions. A perfect function would be able to perfectly map to a hash table with no collisions. \
\
Collision resolution:\
A technique that is implemented when a hash function returns the same value for different inputs. Depending on the technique used it can help alleviate collisions and still be able to map values to a hash table. \
\
Performance of basic hash table operations:\
On average it will be O(1) or constant time. Worst case is linear if we have to insert or delete and we don\'92t know the key since we will have to walk the table and n being the amount of items in the table. \
\
Load factor:\
The amount of items in the table divided by the overall slots.\
\
Automatic resizing:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 By convention you want to double the size if the load factor ratio is over .7 and half the table size if the load is under .2.\
\
Various cases for hash tables:\
Anything involving look ups involving multiple arrays since key value pairs and sets are perfect and make the runtime much faster than lists. \
}